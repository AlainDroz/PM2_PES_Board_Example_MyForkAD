//TASK 1:
#include "mbed.h"

#include "pm2_drivers/PESBoardPinMap.h"
#include "pm2_drivers/DebounceIn.h"
#include "pm2_drivers/FastPWM/FastPWM.h"
#include "pm2_drivers/EncoderCounter.h" 
#include "pm2_drivers/DCMotor.h"
#include <cstdio>

bool do_execute_main_task = false; // this variable will be toggled via the user button (blue button) and
                                   // decides whether to execute the main task or not
bool do_reset_all_once = false;    // this variable is used to reset certain variables and objects and
                                   // shows how you can run a code segment only once

// objects for user button (blue button) handling on nucleo board
DebounceIn user_button(USER_BUTTON);  // create InterruptIn interface object to evaluate user button falling and
                                      // rising edge (no blocking code in ISR)
void user_button_pressed_fcn();       // custom functions which get executed when user
                                      // button gets pressed, definition below

// main runs as an own thread
int main()
{
    // attach button fall function to user button object, button has a pull-up resistor
    user_button.fall(&user_button_pressed_fcn);

    // while loop gets executed every main_task_period_ms milliseconds (simple
    // aproach to repeatedly execute main)
    const int main_task_period_ms = 50; // define main task period time in ms e.g. 50 ms
                                        // -> main task runs 20 times per second
    Timer main_task_timer;              // create Timer object which we use to run the main task every main_task_period_ms
    Timer timer;

    // led on nucleo board
    // create DigitalOut object to command user led
    DigitalOut user_led(USER_LED);

    // additional led's
    // create DigitalOut object to command extra led (you need to add an aditional
    // resistor, e.g. 220...500 Ohm) an led as an anode (+) and a cathode (-), the
    // cathode is connected to ground via a resistor
    DigitalOut led1(PB_8);
    //DigitalOut led2(PB_9);

    // HERE DEFINE OBJECTS (remember about giving comments and proper names)
    DigitalOut enable_motors(PB_ENABLE_DCMOTORS); // create DigitalOut object to enable dc motors

    //Motor M1
    //FastPWM pwm_M1(PB_PWM_M1);                    // create FastPWM object to command motor M1
    
    //const float voltage_max = 12.0f;     // maximum voltage of battery packs, adjust this to 
                                     // 6.0f V if you only use one batterypack

    //Motor M2
    // https://www.pololu.com/product/3485/specs
    //const float gear_ratio_M2 = 78.125f;                       // 78.125:1 gear box
    //const float kn_M2 = 180.0f / 12.0f;                        // motor constant in RPM / V
    //DCMotor motor_M2(PB_PWM_M1, PB_ENC_A_M1, PB_ENC_B_M1, gear_ratio_M2, kn_M2, voltage_max);
    //motor_M2.setEnableMotionPlanner(true);
    //motor_M2.setMaxVelocity(motor_M2.getMaxVelocity() * 0.5f);
    //motor_M2.setMaxAcceleration(motor_M2.getMaxAcceleration() * 0.5f);

    const float voltage_max = 12.0f;     // maximum voltage of battery packs, adjust this to 
                                     // 6.0f V if you only use one batterypack

    //Motor M3
    // https://www.pololu.com/product/3477/specs
    const float gear_ratio_M3 = 78.125f;                       // 78.125:1 gear box
    const float kn_M3 = 180.0f / 12.0f;                        // motor constant in RPM / V
    DCMotor motor_M3(PB_PWM_M1, PB_ENC_A_M1, PB_ENC_B_M1, gear_ratio_M3, kn_M3, voltage_max);
    motor_M3.setEnableMotionPlanner(true);
    motor_M3.setMaxVelocity(motor_M3.getMaxVelocity() * 0.5f);
    motor_M3.setMaxAcceleration(motor_M3.getMaxAcceleration() * 0.5f);

    // start timer
    main_task_timer.start();
    timer.start();

    // this loop will run forever
    while (true) {
        main_task_timer.reset();

        if (do_execute_main_task) {
            
            // visual feedback that the main task is executed, setting this once would actually be enough
            led1 = 1;
            // enable hardwaredriver dc motors: 0 -> disabled, 1 -> enabled
            enable_motors = 1;

            //pwm_M1.write(1.0f);
            //motor_M2.setVelocity(motor_M2.getMaxVelocity());
            motor_M3.setRotation(3.0f);

        } else {
            if (do_reset_all_once) {
                do_reset_all_once = false;
                led1 = 0;
            }
        }

        // toggling the user led
        user_led = !user_led;

        //Printing command 

        // read timer and make the main thread sleep for the remaining time span (non blocking)
        int main_task_elapsed_time_ms = std::chrono::duration_cast<std::chrono::milliseconds>(main_task_timer.elapsed_time()).count();
        thread_sleep_for(main_task_period_ms - main_task_elapsed_time_ms);
    }
}

void user_button_pressed_fcn()
{
    // do_execute_main_task if the button was pressed
    do_execute_main_task = !do_execute_main_task;
    if (do_execute_main_task)
        do_reset_all_once = true;
}

//TASK2
#include "mbed.h"

#include "pm2_drivers/PESBoardPinMap.h"
#include "pm2_drivers/DebounceIn.h"
#include "pm2_drivers/UltrasonicSensor.h"
#include "pm2_drivers/EncoderCounter.h" 
#include "pm2_drivers/DCMotor.h"   
#include <cstdio>

bool do_execute_main_task = false; // this variable will be toggled via the user button (blue button) and
                                   // decides whether to execute the main task or not
bool do_reset_all_once = false;    // this variable is used to reset certain variables and objects and
                                   // shows how you can run a code segment only once

// objects for user button (blue button) handling on nucleo board
DebounceIn user_button(USER_BUTTON);  // create InterruptIn interface object to evaluate user button falling and
                                      // rising edge (no blocking code in ISR)
void user_button_pressed_fcn();       // custom functions which get executed when user
                                      // button gets pressed, definition below

// main runs as an own thread
int main()
{
    enum RobotState {
    INITIAL, 
    SLEEP,     
    FORWARD,
    BACKWARD,
    EMERGENCY
    } robot_state = RobotState::INITIAL;

    // attach button fall function to user button object, button has a pull-up resistor
    user_button.fall(&user_button_pressed_fcn);

    // while loop gets executed every main_task_period_ms milliseconds (simple
    // aproach to repeatedly execute main)
    const int main_task_period_ms = 50; // define main task period time in ms e.g. 50 ms
                                        // -> main task runs 20 times per second
    Timer main_task_timer;              // create Timer object which we use to run the main task every main_task_period_ms
    Timer timer;

    // led on nucleo board
    // create DigitalOut object to command user led
    DigitalOut user_led(USER_LED);

    // additional led's
    // create DigitalOut object to command extra led (you need to add an aditional
    // resistor, e.g. 220...500 Ohm) an led as an anode (+) and a cathode (-), the
    // cathode is connected to ground via a resistor
    DigitalOut led1(PB_8);
    //DigitalOut led2(PB_9);

    // HERE DEFINE OBJECTS (remember about giving comments and proper names)
    // mechanical button
    // create DigitalIn object to evaluate extra mechanical button
    DigitalIn mechanical_button(PC_5);
    // set pullup mode: sets pullup between pin and 3.3 V, so that there is a defined potential
    mechanical_button.mode(PullUp);    

    UltrasonicSensor us_sensor(PB_D3);
    float us_distance_cm = 0.0f;

    DigitalOut enable_motors(PB_ENABLE_DCMOTORS); // create DigitalOut object to enable dc motors

    const float voltage_max = 12.0f;     // maximum voltage of battery packs, adjust this to 
                                     // 6.0f V if you only use one batterypack

    //Motor M3
    // https://www.pololu.com/product/3477/specs
    const float gear_ratio_M3 = 78.125f;                       // 78.125:1 gear box
    const float kn_M3 = 180.0f / 12.0f;                        // motor constant in RPM / V
    DCMotor motor_M3(PB_PWM_M1, PB_ENC_A_M1, PB_ENC_B_M1, gear_ratio_M3, kn_M3, voltage_max);
    motor_M3.setEnableMotionPlanner(true);
    motor_M3.setMaxAcceleration(0.5 * motor_M3.getMaxAcceleration());

    // start timer
    main_task_timer.start();
    timer.start();

    // this loop will run forever
    while (true) {
        main_task_timer.reset();

        if (do_execute_main_task) {
            
            // visual feedback that the main task is executed, setting this once would actually be enough
            led1 = 1;
            us_distance_cm = us_sensor.read();


            switch (robot_state) {
                case RobotState::INITIAL: {
                    // enable hardwaredriver dc motors: 0 -> disabled, 1 -> enabled
                    enable_motors = 1;
                    robot_state = RobotState::SLEEP;
                    break;
                }
                case RobotState::SLEEP: {
                    if (mechanical_button.read()) {
                        robot_state = RobotState::FORWARD;
                    }
                    break;
                }
                case RobotState::FORWARD: {
                    motor_M3.setRotation(10.0f);
                    if (motor_M3.getRotation() > 9.95f) {
                        robot_state = RobotState::BACKWARD;
                    }
                    else if (us_distance_cm < 7.0f) {
                        robot_state = RobotState::EMERGENCY;
                    }
                    break;
                }
                case RobotState::BACKWARD: {
                    motor_M3.setRotation(0.0f);
                    robot_state = RobotState::SLEEP;
                    break;
                }
                case RobotState::EMERGENCY: {
                    motor_M3.setEnableMotionPlanner(false);
                    motor_M3.setRotation(0.0f);
                    if (motor_M3.getRotation() < 0.05f) {
                        user_button_pressed_fcn();
                    }
                    break;
                }
                default: {
                    break; 
                }
            }
        } else {
            if (do_reset_all_once) {
                do_reset_all_once = false;
                led1 = 0;
                enable_motors = 0;
                us_distance_cm = 0.0f;
            }
        }

        // toggling the user led
        user_led = !user_led;

        //Printing command 
        printf("%f, %f \n", us_distance_cm, motor_M3.getRotation());

        // read timer and make the main thread sleep for the remaining time span (non blocking)
        int main_task_elapsed_time_ms = std::chrono::duration_cast<std::chrono::milliseconds>(main_task_timer.elapsed_time()).count();
        thread_sleep_for(main_task_period_ms - main_task_elapsed_time_ms);
    }
}

void user_button_pressed_fcn()
{
    // do_execute_main_task if the button was pressed
    do_execute_main_task = !do_execute_main_task;
    if (do_execute_main_task)
        do_reset_all_once = true;
}